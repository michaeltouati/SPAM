#######################################################################
##                                                                   ##
##  Stopping Power of Protons and Alpha particles in Ambiant Matter  ##
##                              (SPAM)                               ##
##                                                                   ##
## Copyright © 2019 Michaël J TOUATI                                 ##
##                                                                   ##
## This file is part of SPAM.                                        ##
##                                                                   ##
## SPAM is free software: you can redistribute it and/or modify      ##
## it under the terms of the GNU General Public License as published ##
## by the Free Software Foundation, either version 3 of the License, ##
## or (at your option) any later version.                            ##
##                                                                   ##
## SPAM is distributed in the hope that it will be useful,           ##
## but WITHOUT ANY WARRANTY; without even the implied warranty of    ##
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     ##
## GNU General Public License for more details.                      ##
##                                                                   ##
## You should have received a copy of the GNU General Public License ##
## along with ESVM. If not, see <https://www.gnu.org/licenses/>.     ##
##                                                                   ##
#######################################################################
import math

Euler_constant = 0.577215664901533

##################################################################################################################
#                             Ashley, Ritchie Brandt function for Barkas correction
# According to J. C. Ashley, R. H. Ritchie and Werner Brandt, Phys. Rev. B, Vol. 5, No. 7, pages 2393-2397 (1972)
#              J. C. Ashley, R. H. Ritchie and Werner Brandt, Phys. Rev. A, Vol. 8, No. 5, pages 2402-2408 (1973)
##################################################################################################################

N_Ashley_function_tab = 1000
w_Ashley_function_tab = [0.01, 0.02, 0.03, 0.04, 0.05, 0.060000000000000005, 0.06999999999999999, 0.08, 0.09, 0.09999999999999999, 0.11, 0.12, 0.13, 0.14, 0.15000000000000002, 0.16, 0.17, 0.18000000000000002, 0.19, 0.2, 0.21000000000000002, 0.22, 0.23, 0.24000000000000002, 0.25, 0.26, 0.27, 0.28, 0.29000000000000004, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35000000000000003, 0.36000000000000004, 0.37, 0.38, 0.39, 0.4, 0.41000000000000003, 0.42000000000000004, 0.43, 0.44, 0.45, 0.46, 0.47000000000000003, 0.48000000000000004, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.5700000000000001, 0.5800000000000001, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.6900000000000001, 0.7000000000000001, 0.7100000000000001, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.8200000000000001, 0.8300000000000001, 0.8400000000000001, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.9400000000000001, 0.9500000000000001, 0.9600000000000001, 0.97, 0.98, 0.99, 1.0, 1.01, 1.02, 1.03, 1.04, 1.05, 1.06, 1.07, 1.08, 1.09, 1.1, 1.11, 1.12, 1.1300000000000001, 1.1400000000000001, 1.1500000000000001, 1.1600000000000001, 1.17, 1.18, 1.19, 1.2, 1.21, 1.22, 1.23, 1.24, 1.25, 1.26, 1.27, 1.28, 1.29, 1.3, 1.31, 1.32, 1.33, 1.34, 1.35, 1.36, 1.37, 1.3800000000000001, 1.3900000000000001, 1.4000000000000001, 1.4100000000000001, 1.42, 1.43, 1.44, 1.45, 1.46, 1.47, 1.48, 1.49, 1.5, 1.51, 1.52, 1.53, 1.54, 1.55, 1.56, 1.57, 1.58, 1.59, 1.6, 1.61, 1.62, 1.6300000000000001, 1.6400000000000001, 1.6500000000000001, 1.6600000000000001, 1.6700000000000002, 1.68, 1.69, 1.7, 1.71, 1.72, 1.73, 1.74, 1.75, 1.76, 1.77, 1.78, 1.79, 1.8, 1.81, 1.82, 1.83, 1.84, 1.85, 1.86, 1.87, 1.8800000000000001, 1.8900000000000001, 1.9000000000000001, 1.9100000000000001, 1.9200000000000002, 1.93, 1.94, 1.95, 1.96, 1.97, 1.98, 1.99, 2.0, 2.01, 2.02, 2.03, 2.04, 2.05, 2.0599999999999996, 2.07, 2.0799999999999996, 2.09, 2.0999999999999996, 2.11, 2.1199999999999997, 2.13, 2.1399999999999997, 2.15, 2.1599999999999997, 2.17, 2.1799999999999997, 2.19, 2.1999999999999997, 2.21, 2.2199999999999998, 2.23, 2.2399999999999998, 2.25, 2.26, 2.27, 2.28, 2.29, 2.3, 2.31, 2.32, 2.3299999999999996, 2.34, 2.3499999999999996, 2.36, 2.3699999999999997, 2.38, 2.3899999999999997, 2.4, 2.4099999999999997, 2.42, 2.4299999999999997, 2.44, 2.4499999999999997, 2.46, 2.4699999999999998, 2.48, 2.4899999999999998, 2.5, 2.51, 2.52, 2.53, 2.54, 2.55, 2.56, 2.57, 2.5799999999999996, 2.59, 2.5999999999999996, 2.61, 2.6199999999999997, 2.63, 2.6399999999999997, 2.65, 2.6599999999999997, 2.67, 2.6799999999999997, 2.69, 2.6999999999999997, 2.71, 2.7199999999999998, 2.73, 2.7399999999999998, 2.75, 2.76, 2.77, 2.78, 2.79, 2.8, 2.81, 2.82, 2.8299999999999996, 2.84, 2.8499999999999996, 2.86, 2.8699999999999997, 2.88, 2.8899999999999997, 2.9, 2.9099999999999997, 2.92, 2.9299999999999997, 2.94, 2.9499999999999997, 2.96, 2.9699999999999998, 2.98, 2.9899999999999998, 3.0, 3.01, 3.02, 3.03, 3.04, 3.05, 3.06, 3.07, 3.08, 3.09, 3.0999999999999996, 3.11, 3.1199999999999997, 3.13, 3.1399999999999997, 3.15, 3.1599999999999997, 3.17, 3.1799999999999997, 3.19, 3.1999999999999997, 3.21, 3.2199999999999998, 3.23, 3.2399999999999998, 3.25, 3.26, 3.27, 3.28, 3.29, 3.3, 3.31, 3.32, 3.33, 3.34, 3.3499999999999996, 3.36, 3.3699999999999997, 3.38, 3.3899999999999997, 3.4, 3.4099999999999997, 3.42, 3.4299999999999997, 3.44, 3.4499999999999997, 3.46, 3.4699999999999998, 3.48, 3.4899999999999998, 3.5, 3.51, 3.52, 3.53, 3.54, 3.55, 3.56, 3.57, 3.58, 3.59, 3.5999999999999996, 3.61, 3.6199999999999997, 3.63, 3.6399999999999997, 3.65, 3.6599999999999997, 3.67, 3.6799999999999997, 3.69, 3.6999999999999997, 3.71, 3.7199999999999998, 3.73, 3.7399999999999998, 3.75, 3.76, 3.77, 3.78, 3.79, 3.8, 3.81, 3.82, 3.83, 3.84, 3.8499999999999996, 3.86, 3.8699999999999997, 3.88, 3.8899999999999997, 3.9, 3.9099999999999997, 3.92, 3.9299999999999997, 3.94, 3.9499999999999997, 3.96, 3.9699999999999998, 3.98, 3.9899999999999998, 4.0, 4.01, 4.02, 4.03, 4.04, 4.05, 4.06, 4.07, 4.08, 4.09, 4.1, 4.109999999999999, 4.12, 4.13, 4.14, 4.1499999999999995, 4.16, 4.17, 4.18, 4.1899999999999995, 4.2, 4.21, 4.22, 4.2299999999999995, 4.24, 4.25, 4.26, 4.27, 4.28, 4.29, 4.3, 4.31, 4.32, 4.33, 4.34, 4.35, 4.36, 4.37, 4.38, 4.39, 4.3999999999999995, 4.41, 4.42, 4.43, 4.4399999999999995, 4.45, 4.46, 4.47, 4.4799999999999995, 4.49, 4.5, 4.51, 4.52, 4.53, 4.54, 4.55, 4.56, 4.57, 4.58, 4.59, 4.6, 4.61, 4.62, 4.63, 4.64, 4.6499999999999995, 4.66, 4.67, 4.68, 4.6899999999999995, 4.7, 4.71, 4.72, 4.7299999999999995, 4.74, 4.75, 4.76, 4.77, 4.78, 4.79, 4.8, 4.81, 4.82, 4.83, 4.84, 4.85, 4.86, 4.87, 4.88, 4.89, 4.8999999999999995, 4.91, 4.92, 4.93, 4.9399999999999995, 4.95, 4.96, 4.97, 4.9799999999999995, 4.99, 5.0, 5.01, 5.02, 5.03, 5.04, 5.05, 5.06, 5.07, 5.08, 5.09, 5.1, 5.11, 5.12, 5.13, 5.14, 5.1499999999999995, 5.16, 5.17, 5.18, 5.1899999999999995, 5.2, 5.21, 5.22, 5.2299999999999995, 5.24, 5.25, 5.26, 5.27, 5.28, 5.29, 5.3, 5.31, 5.32, 5.33, 5.34, 5.35, 5.36, 5.37, 5.38, 5.39, 5.3999999999999995, 5.41, 5.42, 5.43, 5.4399999999999995, 5.45, 5.46, 5.47, 5.4799999999999995, 5.49, 5.5, 5.51, 5.52, 5.53, 5.54, 5.55, 5.56, 5.57, 5.58, 5.59, 5.6, 5.61, 5.62, 5.63, 5.64, 5.6499999999999995, 5.66, 5.67, 5.68, 5.6899999999999995, 5.7, 5.71, 5.72, 5.7299999999999995, 5.74, 5.75, 5.76, 5.77, 5.78, 5.79, 5.8, 5.81, 5.82, 5.83, 5.84, 5.85, 5.86, 5.87, 5.88, 5.89, 5.8999999999999995, 5.91, 5.92, 5.93, 5.9399999999999995, 5.95, 5.96, 5.97, 5.9799999999999995, 5.99, 6.0, 6.01, 6.02, 6.03, 6.04, 6.05, 6.06, 6.07, 6.08, 6.09, 6.1, 6.11, 6.12, 6.13, 6.14, 6.15, 6.16, 6.17, 6.18, 6.1899999999999995, 6.2, 6.21, 6.22, 6.2299999999999995, 6.24, 6.25, 6.26, 6.27, 6.28, 6.29, 6.3, 6.31, 6.32, 6.33, 6.34, 6.35, 6.36, 6.37, 6.38, 6.39, 6.4, 6.41, 6.42, 6.43, 6.4399999999999995, 6.45, 6.46, 6.47, 6.4799999999999995, 6.49, 6.5, 6.51, 6.52, 6.53, 6.54, 6.55, 6.56, 6.57, 6.58, 6.59, 6.6, 6.61, 6.62, 6.63, 6.64, 6.65, 6.66, 6.67, 6.68, 6.6899999999999995, 6.7, 6.71, 6.72, 6.7299999999999995, 6.74, 6.75, 6.76, 6.77, 6.78, 6.79, 6.8, 6.81, 6.82, 6.83, 6.84, 6.85, 6.86, 6.87, 6.88, 6.89, 6.9, 6.91, 6.92, 6.93, 6.9399999999999995, 6.95, 6.96, 6.97, 6.9799999999999995, 6.99, 7.0, 7.01, 7.02, 7.03, 7.04, 7.05, 7.06, 7.07, 7.08, 7.09, 7.1, 7.11, 7.12, 7.13, 7.14, 7.15, 7.16, 7.17, 7.18, 7.1899999999999995, 7.2, 7.21, 7.22, 7.2299999999999995, 7.24, 7.25, 7.26, 7.27, 7.28, 7.29, 7.3, 7.31, 7.32, 7.33, 7.34, 7.35, 7.36, 7.37, 7.38, 7.39, 7.4, 7.41, 7.42, 7.43, 7.4399999999999995, 7.45, 7.46, 7.47, 7.4799999999999995, 7.49, 7.5, 7.51, 7.52, 7.53, 7.54, 7.55, 7.56, 7.57, 7.58, 7.59, 7.6, 7.61, 7.62, 7.63, 7.64, 7.65, 7.66, 7.67, 7.68, 7.6899999999999995, 7.7, 7.71, 7.72, 7.7299999999999995, 7.74, 7.75, 7.76, 7.77, 7.78, 7.79, 7.8, 7.81, 7.82, 7.83, 7.84, 7.85, 7.86, 7.87, 7.88, 7.89, 7.9, 7.91, 7.92, 7.93, 7.94, 7.95, 7.96, 7.97, 7.9799999999999995, 7.99, 8.0, 8.01, 8.02, 8.03, 8.04, 8.05, 8.06, 8.07, 8.08, 8.09, 8.1, 8.11, 8.12, 8.13, 8.14, 8.15, 8.16, 8.17, 8.18, 8.19, 8.2, 8.209999999999999, 8.22, 8.23, 8.24, 8.25, 8.26, 8.27, 8.28, 8.29, 8.3, 8.31, 8.32, 8.33, 8.34, 8.35, 8.36, 8.37, 8.38, 8.39, 8.4, 8.41, 8.42, 8.43, 8.44, 8.45, 8.459999999999999, 8.47, 8.48, 8.49, 8.5, 8.51, 8.52, 8.53, 8.54, 8.55, 8.56, 8.57, 8.58, 8.59, 8.6, 8.61, 8.62, 8.63, 8.64, 8.65, 8.66, 8.67, 8.68, 8.69, 8.7, 8.71, 8.72, 8.73, 8.74, 8.75, 8.76, 8.77, 8.78, 8.79, 8.8, 8.81, 8.82, 8.83, 8.84, 8.85, 8.86, 8.87, 8.88, 8.89, 8.9, 8.91, 8.92, 8.93, 8.94, 8.95, 8.96, 8.97, 8.98, 8.99, 9.0, 9.01, 9.02, 9.03, 9.04, 9.05, 9.06, 9.07, 9.08, 9.09, 9.1, 9.11, 9.12, 9.13, 9.14, 9.15, 9.16, 9.17, 9.18, 9.19, 9.2, 9.21, 9.22, 9.23, 9.24, 9.25, 9.26, 9.27, 9.28, 9.29, 9.3, 9.31, 9.32, 9.33, 9.34, 9.35, 9.36, 9.37, 9.38, 9.39, 9.4, 9.41, 9.42, 9.43, 9.44, 9.45, 9.46, 9.47, 9.48, 9.49, 9.5, 9.51, 9.52, 9.53, 9.54, 9.55, 9.56, 9.57, 9.58, 9.59, 9.6, 9.61, 9.62, 9.63, 9.64, 9.65, 9.66, 9.67, 9.68, 9.69, 9.7, 9.71, 9.72, 9.73, 9.74, 9.75, 9.76, 9.77, 9.78, 9.79, 9.8, 9.81, 9.82, 9.83, 9.84, 9.85, 9.86, 9.87, 9.88, 9.89, 9.9, 9.91, 9.92, 9.93, 9.94, 9.95, 9.96, 9.97, 9.98, 9.99, 10.0]
F_Ashley_function_tab = [25.118864315095802, 21.867241478865562, 19.842130013043064, 18.392604287704085, 17.094610091092235, 16.128713051538366, 15.335428457366227, 14.51926924558917, 13.912116344949336, 13.368905139144593, 12.844981400885187, 12.327884176011827, 11.852037622274185, 11.396127114302578, 10.986545191950645, 10.607158796077139, 10.281320662246909, 9.958362258593022, 9.652236236069239, 9.346110213545453, 9.08273730048808, 8.84608232981674, 8.609427359145398, 8.386441463582237, 8.168587892028587, 7.950734320474933, 7.751246868606388, 7.576513054217809, 7.401779239829232, 7.227045425440654, 7.064213226170384, 6.907605346189901, 6.750997466209416, 6.594389586228933, 6.445313220221227, 6.310338451789192, 6.175363683357158, 6.040388914925123, 5.90541414649309, 5.778437163135089, 5.6623401418858545, 5.54624312063662, 5.430146099387387, 5.314049078138153, 5.197952056888919, 5.095289871479624, 4.99612411967587, 4.8969583678721165, 4.797792616068362, 4.698626864264609, 4.599461112460855, 4.5115203661957795, 4.42448476173057, 4.337449157265361, 4.250413552800152, 4.163377948334943, 4.076342343869735, 3.9922369590171463, 3.9083726964715195, 3.824508433925891, 3.7406441713802634, 3.6567799088346353, 3.5729156462890073, 3.493419258908811, 3.431850421331319, 3.370281583753828, 3.3087127461763357, 3.2471439085988436, 3.185575071021352, 3.12400623344386, 3.0657445423706915, 3.0111771634606805, 2.9566097845506696, 2.902042405640658, 2.8474750267306472, 2.792907647820636, 2.7383402689106244, 2.688317560815809, 2.63884162510107, 2.589365689386331, 2.539889753671592, 2.490413817956853, 2.440937882242114, 2.391461946527375, 2.347938115724085, 2.3071811906866273, 2.2664242656491695, 2.225667340611712, 2.1849104155742536, 2.144153490536796, 2.103396565499338, 2.0678825317101106, 2.0335197722610077, 1.9991570128119047, 1.9647942533628013, 1.9304314939136984, 1.896068734464596, 1.8617059750154927, 1.829100613536354, 1.7992055373674505, 1.7693104611985473, 1.739415385029644, 1.709520308860741, 1.6796252326918377, 1.6497301565229345, 1.6198350803540313, 1.5945088121616293, 1.5694424120370982, 1.544376011912567, 1.5193096117880356, 1.4942432116635045, 1.4691768115389734, 1.444110411414442, 1.4190440112899108, 1.397359634808486, 1.3759233961348472, 1.3544871574612085, 1.3330509187875699, 1.311614680113931, 1.2901784414402921, 1.2687422027666533, 1.2473059640930144, 1.2287251845720009, 1.210176264341187, 1.1916273441103733, 1.1730784238795593, 1.1545295036487455, 1.1359805834179317, 1.117431663187118, 1.098882742956304, 1.0809147147589064, 1.0635710378868743, 1.0462273610148423, 1.0288836841428102, 1.011540007270778, 0.994196330398746, 0.9768526535267139, 0.9595089766546818, 0.9421652997826497, 0.9265333733811534, 0.91414123006107, 0.9017490867409867, 0.8893569434209032, 0.8769648001008199, 0.8645726567807365, 0.8521805134606529, 0.8397883701405695, 0.8273962268204862, 0.8150040835004028, 0.8035723709377011, 0.7927753160637662, 0.781978261189831, 0.771181206315896, 0.7603841514419609, 0.749587096568026, 0.7387900416940909, 0.7279929868201559, 0.7171959319462209, 0.706398877072286, 0.695757429495598, 0.6859449347971461, 0.6761324400986941, 0.6663199454002423, 0.6565074507017904, 0.6466949560033385, 0.6368824613048866, 0.6270699666064347, 0.6172574719079829, 0.607444977209531, 0.5976324825110791, 0.5878199878126271, 0.5803851381565953, 0.5731031603956729, 0.5658211826347505, 0.558539204873828, 0.5512572271129055, 0.5439752493519832, 0.5366932715910606, 0.5294112938301381, 0.5221293160692158, 0.5148473383082932, 0.5075653605473709, 0.5002833827864483, 0.49413546219803367, 0.48803793481669294, 0.4819404074353522, 0.47584288005401154, 0.4697453526726708, 0.46364782529133003, 0.45755029790998925, 0.4514527705286486, 0.44535524314730784, 0.4392577157659672, 0.43350922818710835, 0.4284939458418809, 0.4234786634966533, 0.41846338115142584, 0.41344809880619837, 0.40843281646097085, 0.4034175341157433, 0.3984022517705159, 0.3933869694252883, 0.3883716870800609, 0.3833564047348333, 0.37838957786054406, 0.3740697448986684, 0.3697499119367925, 0.36543007897491686, 0.361110246013041, 0.35679041305116527, 0.35247058008928944, 0.34815074712741373, 0.3438309141655379, 0.3395110812036622, 0.33519124824178625, 0.3308714152799106, 0.32664099340452885, 0.3229406618702443, 0.31924033033595967, 0.3155399988016751, 0.31183966726739043, 0.3081393357331059, 0.3044390041988212, 0.3007386726645367, 0.297038341130252, 0.2933380095959675, 0.289655295956375, 0.28613750581690156, 0.28261971567742794, 0.27910192553795443, 0.2755841353984808, 0.2720663452590073, 0.2685485551195338, 0.2650307649800602, 0.26151297484058666, 0.25799518470111305, 0.25447739456163954, 0.25137879491803894, 0.24864153986066326, 0.24590428480328747, 0.24316702974591184, 0.24042977468853605, 0.2376925196311604, 0.23495526457378463, 0.23221800951640897, 0.22948075445903318, 0.2267434994016575, 0.22400624434428174, 0.22126898928690608, 0.21853173422953032, 0.21579447917215464, 0.2134330906913302, 0.21125701358119503, 0.20908093647105971, 0.2069048593609245, 0.20472878225078925, 0.20255270514065407, 0.20037662803051887, 0.19820055092038358, 0.1960244738102484, 0.1938483967001131, 0.19167231958997794, 0.18949624247984265, 0.18732016536970744, 0.18514408825957218, 0.18296801114943698, 0.1812110179672127, 0.17945468428267936, 0.1776983505981459, 0.17594201691361255, 0.1741856832290791, 0.17242934954454572, 0.17067301586001232, 0.1689166821754789, 0.16716034849094547, 0.16540401480641212, 0.16364768112187866, 0.16189134743734532, 0.16027845865355417, 0.1587409660047669, 0.1572034733559796, 0.1556659807071923, 0.15412848805840504, 0.1525909954096177, 0.15105350276083043, 0.1495160101120431, 0.14797851746325585, 0.14644102481446852, 0.14490353216568128, 0.14336603951689392, 0.14182854686810667, 0.14026722827188454, 0.1386966871869491, 0.13712614610201368, 0.13555560501707825, 0.13398506393214282, 0.1324145228472074, 0.13084398176227197, 0.12927344067733654, 0.12770289959240108, 0.12613235850746568, 0.12456181742253022, 0.12299127633759484, 0.12142073525265937, 0.11988547819142734, 0.11884168674436077, 0.1177978952972942, 0.11675410385022762, 0.11571031240316107, 0.11466652095609453, 0.11362272950902794, 0.1125789380619614, 0.1115351466148948, 0.11049135516782824, 0.10944756372076166, 0.1084037722736951, 0.10735998082662852, 0.10631618937956198, 0.10527239793249539, 0.10445065030129938, 0.10365442830474365, 0.10285820630818793, 0.1020619843116322, 0.1012657623150765, 0.10046954031852076, 0.09967331832196503, 0.09887709632540931, 0.0980808743288536, 0.09728465233229786, 0.09648843033574214, 0.0956922083391864, 0.09489598634263069, 0.09409976434607496, 0.09330354234951925, 0.09250732035296355, 0.09171109835640781, 0.0909148763598521, 0.09009740913720292, 0.08923169748352527, 0.0883659858298476, 0.08750027417616997, 0.0866345625224923, 0.08576885086881467, 0.08490313921513701, 0.08403742756145938, 0.08317171590778169, 0.08230600425410407, 0.0814402926004264, 0.08057458094674877, 0.0797088692930711, 0.07884315763939347, 0.0779774459857158, 0.07711173433203816, 0.07639541625534942, 0.0758435410281479, 0.07529166580094636, 0.07473979057374483, 0.07418791534654329, 0.07363604011934177, 0.07308416489214024, 0.07253228966493871, 0.0719804144377372, 0.07142853921053564, 0.07087666398333411, 0.07032478875613257, 0.06977291352893106, 0.06922103830172951, 0.068669163074528, 0.06811728784732646, 0.06756541262012493, 0.06701353739292339, 0.06646166216572187, 0.06590978693852032, 0.06535791171131881, 0.06486622942123012, 0.06438608671910664, 0.06390594401698317, 0.0634258013148597, 0.06294565861273622, 0.062465515910612765, 0.06198537320848928, 0.061505230506365825, 0.061025087804242345, 0.060544945102118886, 0.06006480239999541, 0.05958465969787194, 0.05910451699574848, 0.05862437429362499, 0.05814423159150154, 0.05766408888937805, 0.05718394618725459, 0.05665113093715035, 0.056047552566324, 0.055443974195497625, 0.05484039582467126, 0.05423681745384489, 0.053633239083018536, 0.05302966071219216, 0.05242608234136581, 0.05182250397053943, 0.05121892559971308, 0.050615347228886734, 0.05001176885806033, 0.04940819048723397, 0.048804612116407624, 0.04836755239020398, 0.048056691519621116, 0.04774583064903827, 0.047434969778455426, 0.047124108907872594, 0.04681324803728974, 0.04650238716670688, 0.04619152629612404, 0.045880665425541194, 0.04556980455495835, 0.04525894368437548, 0.04494808281379264, 0.0446372219432098, 0.044326361072626955, 0.04401550020204409, 0.04370463933146125, 0.043393778460878406, 0.04308291759029556, 0.042772056719712695, 0.04246119584912985, 0.04215033497854701, 0.041839474107964174, 0.0415286132373813, 0.041217752366798456, 0.04092338656090389, 0.040631197975811294, 0.040339009390718675, 0.04004682080562609, 0.03975463222053349, 0.03946244363544091, 0.03917025505034829, 0.03887806646525569, 0.03858587788016311, 0.03829368929507051, 0.03800150070997792, 0.037709312124885305, 0.03741712353979271, 0.037124934954700116, 0.036832746369607525, 0.036540557784514906, 0.036248369199422315, 0.03595618061432972, 0.03566399202923713, 0.03537180344414451, 0.0351170006293198, 0.03487005575243264, 0.03462311087554547, 0.034376165998658274, 0.03412922112177111, 0.03388227624488394, 0.033635331367996776, 0.03338838649110959, 0.03314144161422242, 0.032894496737335244, 0.03264755186044808, 0.032400606983560884, 0.032153662106673725, 0.03190671722978655, 0.031659772352899386, 0.03141282747601221, 0.031165882599125026, 0.030918937722237857, 0.030671992845350687, 0.03042504796846352, 0.03017810309157633, 0.02997270983110947, 0.029777617438289272, 0.029582525045469068, 0.029387432652648853, 0.029192340259828656, 0.02899724786700845, 0.028802155474188254, 0.028607063081368036, 0.02841197068854784, 0.028216878295727634, 0.028021785902907433, 0.027826693510087215, 0.027631601117267018, 0.02743650872444682, 0.02724141633162662, 0.027046323938806398, 0.0268512315459862, 0.026656139153165996, 0.0264610467603458, 0.0262659543675256, 0.02607086197470538, 0.025875769581885182, 0.0257138911043155, 0.02555910329434287, 0.025404315484370218, 0.025249527674397584, 0.025094739864424953, 0.024939952054452316, 0.024785164244479668, 0.02463037643450703, 0.024475588624534396, 0.024320800814561762, 0.024166013004589114, 0.02401122519461648, 0.02385643738464384, 0.02370164957467121, 0.02354686176469856, 0.023392073954725926, 0.02323728614475329, 0.023082498334780658, 0.022927710524808007, 0.022772922714835372, 0.02261813490486274, 0.0224633470948901, 0.022308559284917467, 0.022187887997177805, 0.02207310033617678, 0.02195831267517575, 0.021843525014174723, 0.02172873735317369, 0.02161394969217266, 0.021499162031171637, 0.021384374370170604, 0.02126958670916957, 0.02115479904816854, 0.021040011387167518, 0.020925223726166488, 0.02081043606516545, 0.020695648404164425, 0.0205808607431634, 0.02046607308216237, 0.020351285421161335, 0.020236497760160305, 0.02012171009915928, 0.020006922438158253, 0.019892134777157216, 0.01977734711615619, 0.019662559455155163, 0.019547771794154133, 0.019415677572314865, 0.019281960625976785, 0.01914824367963872, 0.01901452673330065, 0.018880809786962584, 0.0187470928406245, 0.018613375894286435, 0.01847965894794837, 0.0183459420016103, 0.018212225055272216, 0.018078508108934153, 0.017944791162596084, 0.017811074216258015, 0.01767735726991994, 0.01754364032358187, 0.017409923377243803, 0.017276206430905734, 0.017142489484567654, 0.017008772538229588, 0.016924192020819784, 0.01684121799932441, 0.016758243977829025, 0.01667526995633365, 0.016592295934838276, 0.0165093219133429, 0.016426347891847527, 0.016343373870352146, 0.01626039984885677, 0.016177425827361393, 0.01609445180586602, 0.016011477784370638, 0.015928503762875263, 0.015845529741379885, 0.01576255571988451, 0.01567958169838913, 0.015596607676893755, 0.01551363365539838, 0.015430659633903004, 0.015347685612407621, 0.015264711590912246, 0.01518173756941687, 0.015098763547921494, 0.015015789526426113, 0.014932815504930738, 0.014849841483435364, 0.014766867461939987, 0.014683893440444606, 0.01460091941894923, 0.014517945397453854, 0.014434971375958481, 0.014351997354463105, 0.014274001856795228, 0.014207395036018958, 0.01414078821524269, 0.014074181394466418, 0.014007574573690144, 0.013940967752913876, 0.013874360932137605, 0.013807754111361337, 0.013741147290585062, 0.013674540469808791, 0.013607933649032521, 0.013541326828256255, 0.013474720007479978, 0.013408113186703709, 0.013341506365927439, 0.01327489954515117, 0.013208292724374897, 0.013141685903598627, 0.013075079082822358, 0.013008472262046086, 0.012941865441269813, 0.012875258620493542, 0.012808651799717274, 0.012742044978941006, 0.01267543815816473, 0.012608831337388462, 0.012542224516612192, 0.012475617695835921, 0.012414853363963814, 0.012355416730725254, 0.012295980097486699, 0.012236543464248142, 0.012177106831009588, 0.01211767019777103, 0.012058233564532473, 0.011998796931293918, 0.011939360298055361, 0.011879923664816803, 0.011820487031578248, 0.011761050398339691, 0.011701613765101138, 0.011642177131862576, 0.011582740498624022, 0.011523303865385467, 0.011463867232146912, 0.011404430598908352, 0.011344993965669797, 0.01128555733243124, 0.011226120699192686, 0.011166684065954127, 0.01110724743271557, 0.011047810799477016, 0.010988374166238461, 0.010928937532999906, 0.010869500899761346, 0.01081006426652279, 0.010750627633284236, 0.010699718498534398, 0.010649141785479923, 0.010598565072425455, 0.010547988359370987, 0.010497411646316516, 0.010446834933262044, 0.010396258220207576, 0.010345681507153107, 0.010295104794098639, 0.010244528081044165, 0.010193951367989697, 0.010143374654935228, 0.010092797941880758, 0.010042221228826285, 0.009991644515771815, 0.009941067802717349, 0.009890491089662879, 0.009839914376608406, 0.009789337663553938, 0.009738760950499468, 0.009688184237445, 0.00963760752439053, 0.009587030811336057, 0.00953645409828159, 0.009485877385227121, 0.009435300672172652, 0.00938472395911818, 0.009334147246063709, 0.00928357053300924, 0.009232993819954773, 0.009188991128241421, 0.009147548901828891, 0.009106106675416361, 0.00906466444900383, 0.0090232222225913, 0.008981779996178768, 0.00894033776976624, 0.00889889554335371, 0.008857453316941178, 0.008816011090528647, 0.008774568864116117, 0.008733126637703589, 0.008691684411291055, 0.008650242184878525, 0.008608799958465994, 0.008567357732053464, 0.008525915505640936, 0.008484473279228402, 0.008443031052815872, 0.008401588826403343, 0.008360146599990813, 0.00831870437357828, 0.00827726214716575, 0.00823581992075322, 0.00819437769434069, 0.008152935467928158, 0.008111493241515628, 0.008070051015103098, 0.008028608788690569, 0.007987166562278035, 0.007945724335865505, 0.007904688599252582, 0.007869663461305677, 0.00783463832335877, 0.007799613185411866, 0.00776458804746496, 0.007729562909518056, 0.0076945377715711485, 0.007659512633624244, 0.0076244874956773396, 0.0075894623577304355, 0.0075544372197835314, 0.007519412081836623, 0.007484386943889719, 0.007449361805942814, 0.007414336667995909, 0.0073793115300490025, 0.0073442863921020975, 0.0073092612541551935, 0.0072742361162082885, 0.007239210978261381, 0.007204185840314476, 0.007169160702367571, 0.007134135564420668, 0.00709911042647376, 0.007064085288526855, 0.0070290601505799515, 0.006994035012633046, 0.00695900987468614, 0.006923984736739235, 0.00688895959879233, 0.006853934460845426, 0.0068189093228985176, 0.0067838841849516135, 0.0067488590470047094, 0.00671583530009213, 0.006683086149580949, 0.006650336999069766, 0.006617587848558586, 0.006584838698047405, 0.006552089547536224, 0.006519340397025041, 0.0064865912465138596, 0.0064538420960026785, 0.006421092945491499, 0.006388343794980315, 0.006355594644469134, 0.006322845493957954, 0.006290096343446773, 0.006257347192935589, 0.006224598042424409, 0.006191848891913228, 0.006159099741402047, 0.006126350590890864, 0.006093601440379684, 0.006060852289868503, 0.0060281031393573225, 0.005995353988846138, 0.005962604838334958, 0.0059298556878237775, 0.005897106537312596, 0.005870951885798731, 0.005846138555680501, 0.005821325225562272, 0.005796511895444044, 0.005771698565325815, 0.0057468852352075845, 0.005722071905089356, 0.005697258574971128, 0.0056724452448529, 0.005647631914734668, 0.00562281858461644, 0.005598005254498212, 0.005573191924379983, 0.005548378594261753, 0.005523565264143525, 0.005498751934025296, 0.005473938603907068, 0.005449125273788837, 0.005424311943670609, 0.00539949861355238, 0.005374685283434152, 0.005349871953315921, 0.005325058623197694, 0.005300245293079465, 0.0052754319629612365, 0.005250618632843006, 0.005225805302724778, 0.005200991972606549, 0.00517617864248832, 0.005151365312370092, 0.0051265519822518615, 0.005101738652133633, 0.005076925322015404, 0.005052111991897176, 0.005027298661778948, 0.005002485331660719, 0.0049850697005283445, 0.004969251659800275, 0.004953433619072205, 0.004937615578344135, 0.004921797537616066, 0.004905979496887995, 0.004890161456159925, 0.004874343415431855, 0.004858525374703783, 0.0048427073339757125, 0.004826889293247642, 0.004811071252519573, 0.004795253211791502, 0.004779435171063432, 0.004763617130335362, 0.0047477990896072925, 0.004731981048879222, 0.00471616300815115, 0.0047003449674230795, 0.004684526926695009, 0.004668708885966939, 0.004652890845238869, 0.0046370728045108, 0.00462125476378273, 0.00460543672305466, 0.004589618682326588, 0.004573800641598517, 0.004557982600870447, 0.0045421645601423765, 0.004526346519414307, 0.004510528478686236, 0.004494710437958167, 0.004478892397230097, 0.004463074356502024, 0.004447256315773954, 0.004431438275045884, 0.004415620234317815, 0.0043998021935897445, 0.0043839841528616735, 0.004368166112133604, 0.004352348071405534, 0.004336530030677464, 0.004320711989949391, 0.004304893949221321, 0.004289075908493251, 0.004273257867765182, 0.0042574398270371116, 0.004241724164966267, 0.004226022637624584, 0.0042103211102829, 0.004194619582941215, 0.004178918055599532, 0.004163216528257849, 0.0041475150009161665, 0.004131813473574483, 0.0041161119462328, 0.004100410418891118, 0.004084708891549435, 0.0040690073642077485, 0.004053305836866066, 0.004037604309524384, 0.0040219027821827005, 0.004006201254841018, 0.003990499727499335, 0.0039747982001576525, 0.003959096672815969, 0.003943395145474283, 0.003927693618132601, 0.003911992090790918, 0.003896290563449235, 0.0038805890361075517, 0.0038648875087658697, 0.0038491859814241865, 0.0038334844540825032, 0.003817782926740821, 0.003802081399399135, 0.0037863798720574517, 0.0037706783447157693, 0.003754976817374086, 0.0037392752900324033, 0.0037235737626907205, 0.0037078722353490376, 0.003692170708007355, 0.003676469180665669, 0.003660767653323986, 0.003645066125982303, 0.0036294941504265805, 0.0036170895661378315, 0.0036046849818490833, 0.0035922803975603343, 0.003579875813271586, 0.0035674712289828353, 0.0035550666446940867, 0.003542662060405338, 0.0035302574761165895, 0.0035178528918278404, 0.0035054483075390923, 0.0034930437232503432, 0.003480639138961595, 0.0034682345546728464, 0.003455829970384095, 0.0034434253860953466, 0.003431020801806598, 0.0034186162175178494, 0.003406211633229101, 0.003393807048940352, 0.003381402464651604, 0.0033689978803628554, 0.003356593296074104, 0.0033441887117853556, 0.003331784127496607, 0.0033193795432078584, 0.0033069749589191098, 0.0032945703746303607, 0.0032821657903416126, 0.0032697612060528635, 0.0032573566217641127, 0.0032449520374753646, 0.003232547453186616, 0.0032201428688978673, 0.0032077382846091187, 0.0031953337003203697, 0.0031829291160316215, 0.0031705245317428725, 0.003158119947454124, 0.0031457153631653735, 0.003133310778876625, 0.0031209061945878763, 0.003110303309955817, 0.0031024549014642545, 0.003094606492972692, 0.0030867580844811298, 0.0030789096759895676, 0.003071061267498004, 0.0030632128590064416, 0.0030553644505148794, 0.0030475160420233172, 0.003039667633531755, 0.003031819225040193, 0.0030239708165486303, 0.003016122408057068, 0.0030082739995655047, 0.0030004255910739425, 0.00299257718258238, 0.0029847287740908178, 0.002976880365599255, 0.0029690319571076935, 0.002961183548616131, 0.0029533351401245687, 0.0029454867316330065, 0.0029376383231414427, 0.0029297899146498805, 0.0029219415061583183, 0.002914093097666756, 0.002906244689175194, 0.002898396280683632, 0.0028905478721920693, 0.002882699463700507, 0.0028748510552089436, 0.002867002646717381, 0.0028591542382258193, 0.0028513058297342563, 0.0028434574212426946, 0.002835609012751132, 0.00282776060425957, 0.0028199121957680076, 0.0028120637872764438, 0.0028042153787848816, 0.00279636697029332, 0.002788518561801757, 0.002780670153310195, 0.002740662412230978, 0.0027319756916183296, 0.0027233253486383664, 0.002714711193988788, 0.002706133039544339, 0.002697590698348307, 0.0026890839846040733, 0.002680612713666749, 0.002672176702034871, 0.0026637757673421696, 0.002655409728349404, 0.002647078404936262, 0.0026387816180933254, 0.0026305191899141135, 0.002622290943587167, 0.002614096703388222, 0.0026059362946724315, 0.0025978095438666583, 0.002589716278461827, 0.00258165632700534, 0.00257362951909355, 0.0025656356853643084, 0.002557674657489551, 0.002549746268167964, 0.0025418503511177005]

def Ashley_function(w):
	'''
	input  : w = b /sqrt(x) where x     = (beta/alpha)^2 / Z
             	                  beta  = projectile velocity / c
                                  c     = velocity of light in vacuum
                                  alpha = fine structure constant
                                  Z     = atomic number
                                  b     = parameter depending on the material
	output : J. C. Ashley, R. H. Ritchie and Werner Brandt function - 
         	 Eq. (14) of Phys. Rev. B, Vol. 5, No. 7, page 2393-2397 (1972)
    '''
	if w < w_Ashley_function_tab[0]:
		F = 10./(w**0.2)             # prolongation by M Touati
	elif w > w_Ashley_function_tab[N_Ashley_function_tab-1]:
		F = 8.0/(w**3.5)             # prolongation by M Touati
	else :                           # read the table
		# Find by dichotomy the closest cell :
		not_found = True
		il = 0
		ir = N_Ashley_function_tab-1
		im = int((il+ir)/2)
		while not_found == True :
			if (w_Ashley_function_tab[im] <= w):
				il = im
			else:
				ir = im
			im = int((il+ir)/2)
			if ir - 1 > il:
				not_found = True
			else:
				not_found = False
		# Linear interpolation :
		alpha = ( w_Ashley_function_tab[im+1] - w )  / ( w_Ashley_function_tab[im+1] - w_Ashley_function_tab[im] )
		beta  = ( w - w_Ashley_function_tab[im]) / ( w_Ashley_function_tab[im+1] - w_Ashley_function_tab[im] )
		F = ( alpha * F_Ashley_function_tab[im] ) + ( beta  * F_Ashley_function_tab[im+1] )
	return F;

#########################################################################################
#                             Block function for Bloch correction
# According to F. Bloch - Zur Bremsung rash bewegter teilchen beim Durchgang durch die 
#                         Matter - Ann. Phys. 16, 285 (1933)
#########################################################################################

def Bloch_function_y_small(y):
	'''
	input  : y = z alpha / beta where beta  = projectile velocity / c
	                                  c     = velocity of light in vacuum
	                                  alpha = fine structure constant
	                                  z     = projectile atomic number
	output : -y^2 * [ 1.20206 - y^2 * (1.042 - 0.8549 y^2 +0.343 y^4) ] when y << 1
	         according to Eq. (2.7) of Berger et al. - 
	         - Stopping powers and ranges for protons and alpha particles - 
	         ICRU report 49 (1993)
	'''
	a  = 1.20206
	b  = 1.042
	c  = 0.8549
	d  = 0.343
	y2 = y  * y
	y4 = y2 * y2
	F  = - y2 * ( a - ( y2 * ( b - ( c * y2 ) + ( d * y4 )  ) ) )
	return F;

def Bloch_function_y_large(y):
	'''
	input  : y = z alpha / beta where beta  = projectile velocity / c
	                                  c     = velocity of light in vacuum
	                                  alpha = fine structure constant
	                                  z     = projectile atomic number
	output : -gamma_Euler - ln(y)
	         according to Berger et al. - 
	         - Stopping powers and ranges for protons and alpha particles -
	         ICRU report 49 (1993)
	'''
	F = - Euler_constant - math.log(float(y))
	return F;

def Bloch_function_simple_precision(y):
	'''
	input  : y = z alpha / beta where beta  = projectile velocity / c
	                                  c     = velocity of light in vacuum
	                                  alpha = fine structure constant
	                                  z     = projectile atomic number
	output :       ----infinity
	               \                  1
	         -y^2 * |           ---------------  with a double precision
	               /             n ( n^2 + y^2)
	               ----n=1
	'''
	simple_precision = False
	y2 = y * y
	s  = 0.
	n  = 0
	while simple_precision == False :
		n  = n + 1
		n2 = n * n
		D  = float(n) *( float(n2) + float(y2) )
		t  = 1. / D
		if t > 1.e-7 :
			s = s + t
			simple_precision = False
		else :
			simple_precision = True
			break
	F = - y2 * s 
	return F;

def Bloch_function_double_precision(y):
	'''
	input  : y = z alpha / beta where beta  = projectile velocity / c
	                                  c     = velocity of light in vacuum
	                                  alpha = fine structure constant
	                                  z     = projectile atomic number
	output :       ----infinity
	               \                   1
	         -y^2 * |           ---------------  with a double precision
	               /             n ( n^2 + y^2)
	               ----n=1
	'''
	double_precision = False
	y2 = y * y
	s  = 0.
	n  = 0
	while double_precision == False :
		n  = n + 1
		n2 = n * n
		D  = float(n) *( float(n2) + float(y2) )
		t  = 1. / D
		if t > 1.e-15 :
			s = s + t
			double_precision = False
		else :
			double_precision = True
			break
	F = - y2 * s 
	return F;

def Bloch_function(y):
	'''
	input  : y = z alpha / beta where beta  = projectile velocity / c
	                                  c     = velocity of light in vacuum
	                                  alpha = fine structure constant
	                                  z     = projectile atomic number
	output : -y^2 * [ 1.20206 - y^2 * (1.042 - 0.8549 y^2 +0.343 y^4) ] if y <  0.1
	         -gamma_Euler - ln(y)                                       if y >= 10. and
	output :       ----infinity
	               \                   1
	         -y^2 * |           ---------------  with a simple precision else
	               /             n ( n^2 + y^2)
	               ----n=1
	'''
	if y < 0.1:
		F = Bloch_function_y_small(y)
	elif y >= 10.:
		F = Bloch_function_y_large(y)
	else :
		F = Bloch_function_simple_precision(y)
	return F;

def dichotomy(value,array,ordering):
	'''
	input  : value    = a real value
	         array    = an array containing different values
	         ordering > 0 if the array values are decreasing monotically with increasing indices or
	                  < 0 if the array values are increasing monotically with increasing indices
	output : im       = index such that array[im] <= value < array[im+1]
	'''
	N         = len(array)
	if (ordering > 0):
		il = 0
		ir = N-1 
	else:
		il = N-1
		ir = 0 
	im = int((il+ir)/2)
	not_found = True
	while (not_found == True) :
		if (array[im] <= value):
			il = im
		else:
			ir = im
		im = int((il+ir)/2)
		if ordering < 0:
			if (il - 1) > ir :
				not_found = True
			else:
				not_found = False
		else :
			if (ir - 1) > il :
				not_found = True
			else:
				not_found = False
	return im;
	
def linear_extrapolation_1D(x1,y1,x2,y2,x):
	'''
	input  : (x1, y1) = point 1
	         (x2, y2) = point 2
	         x        = value at which we want to estimate y
	output : y        = a x + b assuming y1 = a x1 + b
	                                     y2 = a x2 + b
	'''
	dx = x2 - x1
	a  = (y2 - y1) / dx
	z2 = y1*x2
	z1 = y2*x1
	b  = (z2 - z1) / dx
	y  = (a * x) + b
	return y;

def linear_interpolation_1D(x1,y1,x2,y2,x):
	'''
	input  : (x1, y1, z11) = point 1
	         (x1, y2, z12) = point 2
	         (x2, y1, z21) = point 3
	         (x2, y2, z22) = point 4
	         (x,y)         = value at which we want to estimate z
	output : z             = linearly interpolated value
	'''
	alpha = (x2 - x) / (x2 - x1)
	beta  = (x - x1) / (x2 - x1)
	y     = alpha * y1 + beta  * y2
	return y;

def linear_extrapolation_2D(x1,y1,z1,x2,y2,z2,x3,y3,z3,x,y):
	'''
	input  : (x1, y1, z1) = point 1
	         (x2, y2, z2) = point 2
	         (x2, y2, z2) = point 3
	         (x,y)        = value at which we want to estimate z
	output : z            = a x + b y + c assuming z1 = a x1 + b y1 + c 
	                                               z2 = a x2 + b y2 + c
	                                               z3 = a x3 + b y3 + c
	'''
	D =  (x1 * (y2 - y3)) + (x2 * (y3 - y1)) + (x3 * (y1 - y2))
	a = ((y1 * (z3 - z2)) + (y2 * (z1 - z3)) + (y3 * (z2 - z1))) / D
	b = ((x1 * (z2 - z3)) + (x2 * (z3 - z1)) + (x3 * (z1 - z2))) / D
	c = ((x1 * ((y2*z3) - (y3*z2))) + (x2 *((y3*z1)-(z3*y1)) ) + (x3*((y1*z2)-(y2*z1)))) / D
	z = (a * x) + (b * y) + c
	return z;

def linear_interpolation_2D(x1,y1,x2,y2,z11,z12,z21,z22,x,y):
	'''
	input  : (x1, y1, z11) = point 1
	         (x1, y2, z12) = point 2
	         (x2, y1, z21) = point 3
	         (x2, y2, z22) = point 4
	         (x,y)         = value at which we want to estimate z
	output : z             = linearly interpolated value
	'''
	alpha_x = (x2 - x) / (x2 - x1)
	alpha_y = (y2 - y) / (y2 - y1)
	beta_x  = (x - x1) / (x2 - x1)
	beta_y  = (y - y1) / (y2 - y1)
	z1      = alpha_x * alpha_y * z11
	z2      = alpha_x * beta_y  * z12
	z3      = beta_x  * alpha_y * z21
	z4      = beta_x  * beta_y  * z22
	z       = z1 + z2 + z3 + z4
	return z;

def evaluate_value_from_1D_table(x,x_array,y_array):
	'''
	input  : x       = value at which we want to evaluate f(x) where f is un unknown function
	         x_array = an array containing different values of x0, x1, x2, ... with x0 > x1 > x2 > ... 
	         y_array = an array containinf the corresponding y0 = f(x0), y1 = f(x1), ...
	output : y       = f(x) by linear interpolation or extrapolation
	'''
	N = len(x_array)
	if (N != len(y_array)):
		print("Error : x_array and y_array dont have the same size")
	else :
		x_max = x_array[0]; x_min = x_array[N-1]
		if (x >= x_min) and (x < x_max):
			im = dichotomy(x,x_array,-1)
			x1 = x_array[im  ];y1 = y_array[im  ]
			x2 = x_array[im+1];y2 = y_array[im+1]
			y  = linear_interpolation_1D(x1,y1,x2,y2,x)
		elif (x < x_min):
			x1 = x_array[N-1];y1 = y_array[N-1]
			x2 = x_array[N-2];y2 = y_array[N-2]
			y  = linear_extrapolation_1D(x1,y1,x2,y2,x)
		elif (x >= x_max):
			x1 = x_array[1];y1 = y_array[1]
			x2 = x_array[0];y2 = y_array[0]
			y  = linear_extrapolation_1D(x1,y1,x2,y2,x)
	return y;

def evaluate_value_from_2D_table(x_array,y_array,z_table,x,y):
	'''
	input  : x_array = array containing all x[i]
	         y_array = array containing all y[j]
	         z_table = table containing all B[j][i] = f(x[i],y[j])
	         x and y = values at which we want to evaluate f(x, y)
	output : z      = interpolated or extrapolated value z = f(x, y)
	'''
	N_y = len(y_array)
	N_x = len(x_array)
	if   (y < y_array[0]) and (x >= x_array[0]):
		# linear extrapolation
		x1 = y_array[0];y1 = x_array[0];z1 = z_table[0][0]
		x2 = y_array[1];y2 = x_array[0];z2 = z_table[1][0]
		x3 = y_array[0];y3 = x_array[1];z3 = z_table[0][1]
		z = linear_extrapolation_2D(x1,y1,z1,x2,y2,z2,x3,y3,z3,y,x)
	elif (y < y_array[0]) and (x < x_array[N_x-1]):
		# linear extrapolation
		x1 = y_array[0];y1 = x_array[N_x-1];z1 = z_table[0][N_x-1]
		x2 = y_array[1];y2 = x_array[N_x-1];z2 = z_table[1][N_x-1]
		x3 = y_array[0];y3 = x_array[N_x-2];z3 = z_table[0][N_x-2]
		z = linear_extrapolation_2D(x1,y1,z1,x2,y2,z2,x3,y3,z3,y,x)
	elif (y >= y_array[N_y-1]) and (x >= x_array[0]):
		# linear extrapolation
		x1 = y_array[N_y-1];y1 = x_array[0];z1 = z_table[N_y-1][0]
		x2 = y_array[N_y-2];y2 = x_array[0];z2 = z_table[N_y-2][0]
		x3 = y_array[N_y-1];y3 = x_array[1];z3 = z_table[N_y-1][1]
		z = linear_extrapolation_2D(x1,y1,z1,x2,y2,z2,x3,y3,z3,y,x) 
	elif (y >= y_array[N_y-1]) and (x < x_array[N_x-1]):
		# linear extrapolation
		x1 = y_array[N_y-1];y1 = x_array[N_x-1];z1 = z_table[N_y-1][N_x-1]
		x2 = y_array[N_y-2];y2 = x_array[N_x-1];z2 = z_table[N_y-2][N_x-1]
		x3 = y_array[N_y-1];y3 = x_array[N_x-2];z3 = z_table[N_y-1][N_x-2]
		z = linear_extrapolation_2D(x1,y1,z1,x2,y2,z2,x3,y3,z3,y,x) 
	else :
		if   (y < y_array[0]):
			# Find by dichotomy the closest x :
			jm = dichotomy(x,x_array,-1) 
			# linear extrapolation :
			x1 = y_array[0];y1 = z_table[0][jm]
			x2 = y_array[1];y2 = z_table[1][jm]
			z  = linear_extrapolation_1D(x1,y1,x2,y2,y)
		elif (y >= y_array[N_y-1]):
			# Find by dichotomy the closest x :
			jm = dichotomy(x,x_array,-1) 
			# linear extrapolation :
			x1 = y_array[N_y-1];y1 = z_table[N_y-1][jm]
			x2 = y_array[N_y-2];y2 = z_table[N_y-2][jm]
			z  = linear_extrapolation_1D(x1,y1,x2,y2,y)
		elif (x < x_array[N_x-1]):
			# Find by dichotomy the closest y :
			im = dichotomy(y,y_array,1) 
			# linear extrapolation
			x1 = x_array[N_x-1];y1 = z_table[im][N_x-1]
			x2 = x_array[N_x-2];y2 = z_table[im][N_x-2]
			z  = linear_extrapolation_1D(x1,y1,x2,y2,x)
		elif (x >= x_array[0]):
			# Find by dichotomy the closest y :
			im = dichotomy(y,y_array,1) 
			# linear extrapolation
			x1 = x_array[1];y1 = z_table[im][1]
			x2 = x_array[0];y2 = z_table[im][0]
			z  = linear_extrapolation_1D(x1,y1,x2,y2,x)
		else :
			# Find by dichotomy the closest y :
			im = dichotomy(y,y_array,1) 
			# Find by dichotomy the closest x :
			jm = dichotomy(x,x_array,-1) 
			# linear interpolation :
			x1  = y_array[im  ];y1 = x_array[jm  ]
			x2  = y_array[im+1];y2 = x_array[jm+1]
			z11 = z_table[im  ][jm];z12 = z_table[im  ][jm+1]
			z21 = z_table[im+1][jm];z22 = z_table[im+1][jm+1]
			z	= linear_interpolation_2D(x1,y1,x2,y2,z11,z12,z21,z22,y,x)
	return z;
